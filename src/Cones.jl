
## Functions to create some standard cones in Polymake from Julia objects.

function save_cones(name, cones)
    for (i, cone) in enumerate(cones)
        open(name * "_cone-$i.txt", "w") do io
            writedlm(io, cone.RAYS)
        end
    end
end

"""
$(SIGNATURES)

Return the cone (Polymake big object) corresponding to the nonnegative orthant of R^n.

"""
function cone_positiveorthant(n)
    rays = cat(ones(Int, n)..., dims=(1, 2)) # Build identity
    return Polymake.polytope.Cone(INPUT_RAYS=rays)
end

"""
$(SIGNATURES)

Return the cone (Polymake big object) corresponding to vector space generated by the columns of M.

"""
function cone_vectorspace(M::AbstractMatrix{T}) where {T <: Integer}
    rays = permutedims(hcat(M, -M))
    return Polymake.polytope.Cone(INPUT_RAYS=rays)
end

"""
$(SIGNATURES)

Return the cone (Polymake big object) intersection of the nonnegative orthant and the nullspace of `N`.

"""
function cone_positivenullspace(N::AbstractMatrix{T}) where {T <: Integer}
    Nnemo = matrix(FlintZZ, N)
    r, U = nullspace_right_rational(Nnemo)
    nullspace = T.(Matrix(U[:,1:r]))
    return Polymake.polytope.intersection(cone_positiveorthant(size(N, 2)), cone_vectorspace(nullspace))
end

#################################
#################################
#################################
#################################

raysof(cone) = permutedims(Rational.(Matrix(cone.RAYS)))
verticesof(polytope) = permutedims(Rational.(polymake_dehomog(polytope.VERTICES)))

outernormalcone(polytope, vertex) =
    Polymake.polytope.normal_cone(polytope, vertex - 1, outer=1)
outernormalcone(pp::PolyPolyt, vertex) =
    outernormalcone(Newtonpolytope(pp), vertex)
outernormalcone(p::MPolyElem, vertex) =
    outernormalcone(PolyPolyt(p), vertex)
