
"""

    cone_positiveorthant(n)

Return the cone (Polymake big object) corresponding to the nonnegative orthant of R^n.

"""
function cone_positiveorthant(n)
    rays = cat(ones(Int, n)..., dims=(1, 2))
    return Polymake.polytope.Cone(INPUT_RAYS=rays)
end

"""

    cone_vectorspace(M::AbstractMatrix{T}) where {T <: Integer}

Return the cone (Polymake big object) corresponding to vector space generated by the columns of M.

"""
function cone_vectorspace(M::AbstractMatrix{T}) where {T <: Integer}
    rays = LA.transpose(hcat(M, -M))
    return Polymake.polytope.Cone(INPUT_RAYS=rays)
end

"""

    cone_positivenullspace(N::AbstractMatrix{T}) where {T<:Integer}

Return the cone (Polymake big object) intersection of the nonnegative orthant and the nullspace of `N`.

"""
function cone_positivenullspace(N::AbstractMatrix{T}) where {T <: Integer}
    nullspace = Nemo.nullspace_right_rational(N)
    return Polymake.polytope.intersection(cone_positiveorthant(size(N, 2)), cone_vectorspace(nullspace))
end

#################################
#################################
#################################
#################################

raysof(cone) = Rational.(transpose(Array(cone.RAYS)))

outernormalcone(polytope, vertex) =
    Polymake.polytope.normal_cone(polytope, vertex - 1, outer=1)

outernormalcone(pp::PolyPolyt, vertex) =
    outernormalcone(Newtonpolytope(pp), vertex)

rays_outernormalcone(polytope, vertex) = raysof(outernormalcone(polytope, vertex))

rays_outernormalcone(polytope) =  vertex -> rays_outernormalcone(polytope, vertex)

"""

    integermultiple(A)

Given an array of rational numbers `A`, returns a multiple `λA` with integer entries, where `λ=abs(lcm(denominator.(A)))` is the minimal integer with this property.
"""
function integermultiple(A)
    return Int.(abs(lcm(denominator.(A))) .* A)
end

linearcombination(A) = A * ones(Int, size(A, 2))
linearcombination(A, range) = A * rand(range, 1, size(A, 2))
